#!/bin/bash

# # # # # # # # # # # # # # # # # # # # # # # # #
# ctop - PBS Pro dashboard & resource monitor   #
#                                               #
# by Kevin Guay                                 #
# # # # # # # # # # # # # # # # # # # # # # # # #

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
STATUS_COLOR=$NC

human_print(){
while read B dummy; do
  [[ $B == *kb ]] && b=${B::-2} && echo $(( $b/1024/1024 )) && break
  [[ $B == *mb ]] && b=${B::-2} && echo $(( $b/1024 )) && break
  [[ $B == *gb ]] && b=${B::-2} && echo $(( $b )) && break
  [[ $B == *tb ]] && b=${B::-2} && echo $(( $b*1024 )) && break
done
}

j_flag=false
t_flag=false

# get flags from command line
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "ctop - PBS Pro monitor for high performance computers"
      echo " "
      echo "Usage: ctop [options]"
      echo "options:"
      echo "-h, --help                show brief help"
      echo "-j,                       show running job ids, otherwise show number of running jobs"
      echo "-t,                       show results in text only mode"
      exit 0
      ;;
    -j)
      j_flag=true
      shift
      ;;
    -t)
      t_flag=true
      shift
      ;;
  esac
done

echo -e ${BLUE}REQUESTED RESOURCES BY NODE${NC}

# get list of nodes
nodes=`pbsnodes -av | grep "^[^ ]"`
arr=( $nodes )
arr=($(for l in ${arr[@]}; do echo $l; done | sort -V))

# print table header if text-only mode
if [ $t_flag = true ]; then
  echo 
  echo " node cpu_used cpu_avail %cpu mem_used(gb) mem_avail(gb) %mem #jobs"
  echo "----- -------- --------- ---- ------------ ------------- ---- -----" 
fi

for node in "${arr[@]}"
do

  # collect information from pbsnodes commands
  state=`pbsnodes -v $node|grep 'state ='|tr -d '[:space:]'`
  state=${state##*=}
  cpu_used=`pbsnodes -v $node|grep resources_assigned.ncpus|tr -d '[:space:]'`
  cpu_used=${cpu_used##*=}
  cpu_avail=`pbsnodes -v $node|grep resources_available.ncpus|tr -d '[:space:]'`
  cpu_avail=${cpu_avail##*=}
  mem_used=`pbsnodes -v $node|grep resources_assigned.mem|tr -d '[:space:]'`
  mem_used=${mem_used##*=}
  mem_used=`echo $mem_used | human_print`
  mem_avail=`pbsnodes -v $node|grep resources_available.mem|tr -d '[:space:]'`
  mem_avail=${mem_avail##*=}
  mem_avail=`echo $mem_avail | human_print`

  jobs=`pbsnodes -v $node|grep 'jobs ='|tr -d '[:space:]'`
  jobs=${jobs##*=}
  jobs=(${jobs//,/ })
  jobs=($(for l in ${jobs[@]}; do echo ${l%%.*}; done | uniq))

  # handle unsable nodes
  # https://www.altair.com/pdfs/pbsworks/PBSRefGuide18.2.3.pdf
  # 8.5 Vnode States
  if [[ $state == *down* ]]; then
    if [ $t_flag = true ]; then
      printf "${RED}%5s unavailable${NC}\n" $node
    else
      echo
      echo -e "${RED}$node is NOT available${NC}"
    fi
    continue
  fi

  # skip iteration if c1 or c2
  if [ $cpu_avail -lt 1 ]; then
    continue
  fi

  if [ $t_flag = false ]; then
    echo
    echo -e "${BLUE}$node${NC}"
  fi

  # progress bars (cpu)
  cpu_bar=""
  for i in $(seq 1 $(( $cpu_used*100/$cpu_avail )) )
  do
    cpu_bar+="#"
  done
  for i in $(seq 1 $(( 100-($cpu_used*100/$cpu_avail) )) )
  do
    cpu_bar+="."
  done
  cpu_bar+=\($(( $cpu_used*100/$cpu_avail ))%\)
  if [ $(( $cpu_used*100/$cpu_avail )) -le 10 ]
  then
    cpu_bar+="."
  fi

  # progress bars (mem)
  mem_bar=""
  for i in $(seq 1 $(( $mem_used*100/$mem_avail )) )
  do
    mem_bar+="#"
  done
  for i in $(seq 1 $(( 100-($mem_used*100/$mem_avail) )) )
  do
    mem_bar+="."
  done
  mem_bar+=\($(( $mem_used*100/$mem_avail ))%
  if [ $(( $mem_used*100/$mem_avail )) -le 10 ]
  then
    mem_bar+=")."
  else
    mem_bar+=")"
  fi

  if [ $mem_used -gt 0 ]; then
    STATUS_COLOR=$GREEN
  else
    STATUS_COLOR=$NC
  fi

  # print out results
  if [ $t_flag = true ]; then
    printf "${STATUS_COLOR}%5s %8d %9d %4s %12d %13d %4s %5d${NC}\n" $node $cpu_used $cpu_avail $(( $cpu_used*100/$cpu_avail ))% $mem_used $mem_avail $(( $mem_used*100/$mem_avail ))% ${#jobs[@]}
  else
    printf "${STATUS_COLOR}%*s\r${YELLOW}%s${NC}\n" "$(tput cols)" $cpu_bar "    CPU: "$cpu_used"/"$cpu_avail
    printf "${STATUS_COLOR}%*s\r${YELLOW}%s${NC}\n" "$(tput cols)" $mem_bar "    MEM: "$mem_used"/"$mem_avail"gb"
    printf "${YELLOW}%s%d${NC}\n" "    # of running jobs: " ${#jobs[@]}
  fi  

  if [ -n "$jobs" ] && [ $j_flag = true ]; then
    echo "    running jobs: "${jobs[@]}
  fi

done
